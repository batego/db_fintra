-- Function: con.interfaz_microcredito_apoteosys()

-- DROP FUNCTION con.interfaz_microcredito_apoteosys();

CREATE OR REPLACE FUNCTION con.interfaz_microcredito_apoteosys()
  RETURNS text AS
$BODY$

DECLARE

 /************************************************
  *DESCRIPCION: ESTA FUNCION BUSCA TODOS LO NEGOCIOS MICROCREDITOS.
  *AUTOR:=@MMEDINA
  *FECHA CREACION:=2017-06-20
  *LAST_UPDATE
  *DESCRIPCION DE CAMBIOS Y FECHA
  *PRODUCCION := 1° 2017-07-24 - 2° 2017-07-28
  *CAMBIOS := SE DESMONTARA TODO LOS NEGOCIOS PARA VOVERLOS A MONTAR
  ************************************************/

/**************************************************************************************************************************************
*Validaciones generales:
*
*1.)el periodo del nacimiento de ser tomado de la fecha desembolso.
*2.)la fecha del documento (MC_____FECHA_____B) debe ser a corde con el periodo(f_desem)
*3.)la fecha de emision del documento no puede ser mayor a la fecha de vencimiento si lo es esta se igual a la fecha de vencimiento
*
******************************************************************************************************************************************/

NEGOCIO_ RECORD;
INFOITEMS_ RECORD;
INFOCLIENTE RECORD;
LONGITUD numeric;
SECUENCIA_GEN INTEGER;
SECUENCIA_INT integer:= 1;
CUENTAS_ VARCHAR[] := '{13050802,28150702,23051102,I010130014219,28150704,I010130014169}';
FECHADOC_ VARCHAR:= '';
MCTYPE CON.TYPE_INSERT_MC;
SW TEXT:='N';
validaciones text;

BEGIN
	/**SACAMOS EL LISTADO DE NEGOCIOS*/
	FOR NEGOCIO_ IN
		SELECT neg.periodo,
			neg.cod_neg,
			neg.cod_cli,
			neg.fecha_negocio,
			sola.renovacion,
			conv.agencia
		FROM negocios neg
		INNER JOIN convenios conv ON (conv.id_convenio = neg.id_convenio)
		INNER JOIN rel_unidadnegocio_convenios ruc ON (conv.id_convenio = ruc.id_convenio)
		INNER JOIN unidad_negocio uneg ON (uneg.id = ruc.id_unid_negocio)
		INNER JOIN solicitud_aval sola ON (sola.cod_neg = neg.cod_neg)
		WHERE neg.estado_neg = 'T' AND uneg.id = '1'
		AND procesado_mc = 'N'
		AND neg.cod_neg NOT IN (SELECT negocio_reestructuracion FROM rel_negocios_reestructuracion)
		AND neg.cod_neg in (select cod_neg from tem.negocios_facturacion_old)
		AND neg.periodo = '201706'
	LOOP
		SELECT INTO SECUENCIA_GEN NEXTVAL('CON.INTERFAZ_SECUENCIA_OPER_APOTEOSYS');--PILOTO
		--SELECT INTO SECUENCIA_GEN NEXTVAL('CON.INTERFAZ_SECUENCIA_OPER_APOTEOSYS');--PRODUCTIVO



		MCTYPE.MC_____CODIGO____CONTAB_B := 'FINT' ;
		MCTYPE.MC_____CODIGO____TD_____B := 'OPER' ;
		MCTYPE.MC_____CODIGO____CD_____B := 'MC'  ;
		MCTYPE.MC_____NUMERO____B := SECUENCIA_GEN  ; --SECUENCIA GENERAL

		/**BUSCAMOS LA COMPLETA QUE CONFORMARA EL ASIENTO CONTABLE PARA MANDARLO A APOTEOSYS*/
		FOR INFOITEMS_ IN
				(
					SELECT
						'CARTERA' AS DESCR,
						NUM_DOC_FEN,
						FAC.DOCUMENTO,
						FAC.TIPO_DOCUMENTO,
						FAC.NIT,
						SUM (VALOR_UNITARIO) AS VALOR_DEB,
						0::NUMERIC AS VALOR_CREDT,
						FAC.DESCRIPCION,
						F_DESEM::DATE AS CREATION_DATE,
						FAC.FECHA_VENCIMIENTO,
						REPLACE(SUBSTRING(F_DESEM,1,7),'-','') AS PERIODO,
						CUENTAS_[1]AS CUENTA
					FROM CON.FACTURA FAC
					INNER JOIN NEGOCIOS NEG ON (FAC.NEGASOC = NEG.COD_NEG)
					INNER JOIN CON.FACTURA_DETALLE FACDET ON (FAC.DOCUMENTO = FACDET.DOCUMENTO)
					WHERE NEGASOC = NEGOCIO_.COD_NEG
					AND FACDET.DESCRIPCION IN ('CAPITAL','SEGURO')
					AND FAC.REG_STATUS = ''
					AND FACDET.REG_STATUS = ''
					AND VALOR_UNITARIO > 0
					GROUP BY NUM_DOC_FEN,F_DESEM,FAC.FECHA_VENCIMIENTO,NEGASOC,FAC.TIPO_DOCUMENTO,FAC.NIT,FAC.DESCRIPCION,FAC.PERIODO,FAC.DOCUMENTO
					ORDER BY NUM_DOC_FEN::INTEGER
					)
					UNION ALL
					(SELECT
						'SEGURO' AS DESCR,
						NUM_DOC_FEN,
						FAC.DOCUMENTO,
						'FAP'::VARCHAR AS TIPO_DOCUMENTO,
						'8600284155'::VARCHAR AS NIT,
						0::NUMERIC AS VALOR_DEB,
						SUM (VALOR_UNITARIO) AS VALOR_CREDT,
						FAC.DESCRIPCION,
						F_DESEM::DATE AS CREATION_DATE,
						FAC.FECHA_VENCIMIENTO,
						REPLACE(SUBSTRING(F_DESEM,1,7),'-','') AS PERIODO,
						CUENTAS_[2]AS CUENTA
					FROM CON.FACTURA FAC
					INNER JOIN NEGOCIOS NEG ON (FAC.NEGASOC = NEG.COD_NEG)
					INNER JOIN CON.FACTURA_DETALLE FACDET ON (FAC.DOCUMENTO = FACDET.DOCUMENTO)
					WHERE NEGASOC = NEGOCIO_.COD_NEG
					AND FACDET.DESCRIPCION IN ('SEGURO')
					AND FAC.REG_STATUS = ''
					AND FACDET.REG_STATUS = ''AND VALOR_UNITARIO > 0
					GROUP BY NUM_DOC_FEN,F_DESEM,FAC.FECHA_VENCIMIENTO,NEGASOC,FAC.TIPO_DOCUMENTO,FAC.NIT,FAC.DESCRIPCION,FAC.PERIODO,FAC.DOCUMENTO
					ORDER BY NUM_DOC_FEN::INTEGER
					)
					UNION ALL
					(SELECT
						'CXP_CLIENTE' AS DESCR,
						1::VARCHAR AS DOC,
						CXP.DOCUMENTO,
						TIPO_DOCUMENTO,
						PROVEEDOR AS NIT,
						0::NUMERIC AS VALOR_DEB,
						VLR_NETO AS VALOR_CREDT,
						DESCRIPCION,
						F_DESEM::DATE AS CREATION_DATE,
						CXP.CREATION_DATE::DATE AS VENCIMIENTO,
						REPLACE(SUBSTRING(F_DESEM,1,7),'-','') AS PERIODO,
						CUENTAS_[3]AS CUENTA
					FROM FIN.CXP_DOC CXP
					INNER JOIN NEGOCIOS NEG ON (NEG.COD_NEG =CXP.DOCUMENTO_RELACIONADO)
					WHERE DOCUMENTO_RELACIONADO = NEGOCIO_.COD_NEG
					AND VLR_NETO > 0
					AND CXP.REG_STATUS = ''
					AND DOCUMENTO ILIKE 'MP%'
					)
					UNION ALL
					(SELECT
						'CXP_ESTUDIO' AS DESCR,
						0::VARCHAR AS DOC,
						''::VARCHAR AS DOCUMENTO,
						CXP.TIPO_DOCUMENTO,
						CXP.PROVEEDOR AS NIT,
						0::NUMERIC AS VALOR_DEB,
						(VLR*-1) AS VALOR_CREDT,
						CXPDET.DESCRIPCION,
						F_DESEM::DATE AS CREATION_DATE,
						F_DESEM::DATE AS VENCIMIENTO,
						REPLACE(SUBSTRING(F_DESEM,1,7),'-','') AS PERIODO,
						CUENTAS_[4]AS CUENTA
					FROM FIN.CXP_ITEMS_DOC  CXPDET
					INNER JOIN FIN.CXP_DOC  CXP ON (CXPDET.DOCUMENTO = CXP.DOCUMENTO)
					INNER JOIN NEGOCIOS NEG ON (NEG.COD_NEG = CXP.DOCUMENTO_RELACIONADO)
					WHERE CXP.DOCUMENTO_RELACIONADO = NEGOCIO_.COD_NEG
					AND CXP.DOCUMENTO ILIKE 'MP%'
					AND CXPDET.REG_STATUS = ''
					AND CXP.REG_STATUS = ''
					AND (VLR*-1) > 0
					AND CXPDET.DESCRIPCION ILIKE 'DESCUENTO ESTUDIO DE CREDITO%'
					)
					UNION ALL
					(SELECT
						'FIANZA' AS DESCR,
						0::VARCHAR AS DOC,
						CXP.DOCUMENTO,
						CXP.TIPO_DOCUMENTO,
						FZ.NIT_EMPRESA_FIANZA AS NIT,
						0::NUMERIC AS VALOR_DEB,
						VLR_NETO AS VALOR_CREDT,
						CXP.DESCRIPCION,
						F_DESEM::DATE AS CREATION_DATE,
						F_DESEM::DATE AS VENCIMIENTO,
						REPLACE(SUBSTRING(F_DESEM,1,7),'-','') AS PERIODO,
						CUENTAS_[5]AS CUENTA
					FROM FIN.CXP_DOC CXP
					INNER JOIN NEGOCIOS NEG ON (NEG.COD_NEG= CXP.DOCUMENTO_RELACIONADO)
					INNER JOIN ADMINISTRATIVO.HISTORICO_DEDUCCIONES_FIANZA FZ ON (FZ.NEGOCIO=NEG.COD_NEG)
					WHERE CXP.DOCUMENTO_RELACIONADO = NEGOCIO_.COD_NEG
					AND CXP.REG_STATUS = ''
					AND VLR_NETO > 0
					AND DOCUMENTO ILIKE 'FZT%'
					)
					UNION ALL
					(SELECT
						'RETANQUEO' AS DESCR,
						0::VARCHAR AS DOC,
						'' AS DOCUMENTO,
						'NEG'AS TIPO_DOCUMENTO,
						NEG.COD_CLI AS NIT,
						0::NUMERIC AS VALOR_DEB,
						(CDET.VALOR_CREDITO) AS VALOR_CREDT,
						'NEGOCIO RETANQUEO' AS DESCRIPCION,
						F_DESEM::DATE AS CREATION_DATE,
						F_DESEM::DATE AS VENCIMIENTO,
						REPLACE(SUBSTRING(F_DESEM,1,7),'-','') AS PERIODO,
						CUENTAS_[6]AS CUENTA
					FROM NEGOCIOS NEG
					INNER JOIN CON.FACTURA FAC ON (FAC.NEGASOC = NEG.COD_NEG AND DOCUMENTO ILIKE 'MC%')
					INNER JOIN CON.COMPRODET CDET ON (NEG.COD_NEG = CDET.NUMDOC AND CUENTA = 'I010130014169')
					WHERE COD_NEG = NEGOCIO_.COD_NEG
					AND FAC.REG_STATUS = ''
					AND CDET.VALOR_CREDITO > 0
					GROUP BY NEG.COD_CLI,CDET.VALOR_CREDITO,F_DESEM,NEG.PERIODO
				)

		LOOP

			/**BUSCAMOS LA INFORMACION DEL CLIENTE*/
			SELECT INTO INFOCLIENTE
				(CASE
				WHEN TIPO_DOC ='CED' THEN 'CC'
				WHEN TIPO_DOC ='RIF' THEN 'CE'
				WHEN TIPO_DOC ='NIT' THEN 'NIT' ELSE
				'CC' END) AS TIPO_DOC,
				(CASE
				WHEN GRAN_CONTRIBUYENTE ='N' AND AGENTE_RETENEDOR ='N' THEN 'RCOM'
				WHEN GRAN_CONTRIBUYENTE ='N' AND AGENTE_RETENEDOR ='S' THEN 'RCAU'
				WHEN GRAN_CONTRIBUYENTE ='S' AND AGENTE_RETENEDOR ='N' THEN 'GCON'
				WHEN GRAN_CONTRIBUYENTE ='S' AND AGENTE_RETENEDOR ='S' THEN 'GCAU'
				ELSE 'PNAL' END) AS CODIGO,
				(CASE
				WHEN E.CODIGO_DANE2!='' THEN E.CODIGO_DANE2
				ELSE '08001' END) AS CODIGOCIU,
				(D.NOMBRE1||' '||D.NOMBRE2) AS NOMBRE_CORTO,
				(D.APELLIDO1||' '||D.APELLIDO2) AS APELLIDOS,*
			FROM PROVEEDOR PROV
			LEFT JOIN NIT D ON(D.CEDULA=PROV.NIT)
			LEFT JOIN CIUDAD E ON(E.CODCIU=D.CODCIU)
			WHERE NIT =  INFOITEMS_.NIT;

			raise notice 'descr: %,INFOITEMS_.valor_credt: %',INFOITEMS_.descr,INFOITEMS_.valor_credt;
			--Valida documentos con valores en cero
			if( (INFOITEMS_.descr != 'retanqueo' ) or (INFOITEMS_.descr in ( 'retanqueo','fianza','seguro','cxp_estudio') and INFOITEMS_.valor_credt != 0))then
				--valida si tiene documento soporte
				IF(INFOITEMS_.tipo_documento in ('FAC','FAP' ) AND CON.OBTENER_HOMOLOGACION_APOTEOSYS('MICROCREDITO',INFOITEMS_.tipo_documento, INFOITEMS_.cuenta,NEGOCIO_.agencia, 6)='S')THEN
					MCTYPE.MC_____FECHVENC__B = INFOITEMS_.fecha_vencimiento; --fecha vencimiento
					if (INFOITEMS_.fecha_vencimiento < INFOITEMS_.creation_date)then /** se valida si la fecha de vencimeinto es menor a la de creacion*/
						MCTYPE.MC_____FECHEMIS__B = INFOITEMS_.fecha_vencimiento; --fecha creacion
					else
						MCTYPE.MC_____FECHEMIS__B = INFOITEMS_.creation_date; --fecha creacion
					end if;

				ELSE
					MCTYPE.MC_____FECHEMIS__B='0099-01-01 00:00:00';
					MCTYPE.MC_____FECHVENC__B='0099-01-01 00:00:00';
				END IF;

				--la fecha del documento (MC_____FECHA_____B) debe ser a corde con el periodo(f_desem)
				FECHADOC_ := CASE WHEN REPLACE(SUBSTRING(INFOITEMS_.creation_date,1,7),'-','') = INFOITEMS_.periodo THEN INFOITEMS_.creation_date::DATE ELSE con.sp_fecha_corte_mes(SUBSTRING(INFOITEMS_.periodo,1,4), SUBSTRING(INFOITEMS_.periodo,5,2)::INT)::DATE END;
				MCTYPE.MC_____FECHA_____B := CASE WHEN (INFOITEMS_.creation_date::DATE > FECHADOC_::DATE AND REPLACE(SUBSTRING(INFOITEMS_.creation_date,1,7),'-','') = INFOITEMS_.periodo)  THEN INFOITEMS_.creation_date::DATE ELSE FECHADOC_::DATE END;
				MCTYPE.MC_____SECUINTE__DCD____B := SECUENCIA_INT;--secuencia interna
				MCTYPE.MC_____SECUINTE__B := SECUENCIA_INT;--secuencia interna
				MCTYPE.MC_____REFERENCI_B := NEGOCIO_.cod_neg;
				MCTYPE.MC_____CODIGO____PF_____B := SUBSTRING( INFOITEMS_.periodo,1,4)::INT;
				MCTYPE.MC_____NUMERO____PERIOD_B := SUBSTRING( INFOITEMS_.periodo,5,2)::INT;
				MCTYPE.MC_____CODIGO____PC_____B :=  'PUCF';
				MCTYPE.MC_____CODIGO____CPC____B := CON.OBTENER_HOMOLOGACION_APOTEOSYS('MICROCREDITO', INFOITEMS_.tipo_documento, INFOITEMS_.cuenta, NEGOCIO_.agencia, 1);
				MCTYPE.MC_____CODIGO____CU_____B := CON.OBTENER_HOMOLOGACION_APOTEOSYS('MICROCREDITO', INFOITEMS_.tipo_documento, INFOITEMS_.cuenta, NEGOCIO_.agencia, 2);
				MCTYPE.MC_____IDENTIFIC_TERCER_B := CASE WHEN CHAR_LENGTH(INFOITEMS_.NIT)>9 AND INFOCLIENTE.TIPO_DOC='NIT' THEN SUBSTR(INFOITEMS_.NIT,1,9) ELSE INFOITEMS_.NIT END;
				MCTYPE.MC_____DEBMONORI_B := 0;
				MCTYPE.MC_____CREMONORI_B := 0;
				MCTYPE.MC_____DEBMONLOC_B := INFOITEMS_.valor_deb::NUMERIC;
				MCTYPE.MC_____CREMONLOC_B := INFOITEMS_.valor_credt::NUMERIC;
				MCTYPE.MC_____INDTIPMOV_B := 4;
				MCTYPE.MC_____INDMOVREV_B := 'N';
				MCTYPE.MC_____OBSERVACI_B := INFOITEMS_.descripcion;
				MCTYPE.MC_____FECHORCRE_B := INFOITEMS_.creation_date::TIMESTAMP;
				MCTYPE.MC_____AUTOCREA__B := 'ADMIN';
				MCTYPE.MC_____FEHOULMO__B := INFOITEMS_.creation_date::TIMESTAMP;
				MCTYPE.MC_____AUTULTMOD_B := '';
				MCTYPE.MC_____VALIMPCON_B := 0;
				MCTYPE.MC_____NUMERO_OPER_B := '';
				MCTYPE.TERCER_CODIGO____TIT____B := INFOCLIENTE.tipo_doc;
				MCTYPE.TERCER_NOMBCORT__B := SUBSTR(INFOCLIENTE.nombre_corto,1,32);
				MCTYPE.TERCER_NOMBEXTE__B := SUBSTR (INFOCLIENTE.nombre,1,64);
				MCTYPE.TERCER_APELLIDOS_B := SUBSTR(INFOCLIENTE.apellidos,1,32);
				MCTYPE.TERCER_CODIGO____TT_____B := INFOCLIENTE.codigo;
				MCTYPE.TERCER_DIRECCION_B := SUBSTR(INFOCLIENTE.direccion,1,64);
				MCTYPE.TERCER_CODIGO____CIUDAD_B := INFOCLIENTE.codigociu;
				MCTYPE.TERCER_TELEFONO1_B := CASE WHEN CHAR_LENGTH(INFOCLIENTE.telefono)>15 THEN SUBSTR(INFOCLIENTE.telefono,1,15) ELSE INFOCLIENTE.telefono END;
				MCTYPE.TERCER_TIPOGIRO__B := 1;
				MCTYPE.TERCER_CODIGO____EF_____B := '';
				MCTYPE.TERCER_SUCURSAL__B := '';
				MCTYPE.TERCER_NUMECUEN__B := '';
				MCTYPE.MC_____CODIGO____DS_____B := CON.OBTENER_HOMOLOGACION_APOTEOSYS('MICROCREDITO',INFOITEMS_.tipo_documento, INFOITEMS_.cuenta, NEGOCIO_.agencia, 3);
				IF(CON.OBTENER_HOMOLOGACION_APOTEOSYS('MICROCREDITO', INFOITEMS_.tipo_documento, INFOITEMS_.cuenta,NEGOCIO_.agencia, 4)='S')THEN
					MCTYPE.MC_____NUMDOCSOP_B := INFOITEMS_.documento; -->factura
				ELSE
					MCTYPE.MC_____NUMDOCSOP_B := '';
				END IF;

				IF(CON.OBTENER_HOMOLOGACION_APOTEOSYS('MICROCREDITO', INFOITEMS_.tipo_documento, INFOITEMS_.cuenta, NEGOCIO_.agencia, 5)::INT=1)THEN
					MCTYPE.MC_____NUMEVENC__B := 1;
				ELSE
					MCTYPE.MC_____NUMEVENC__B := NULL;
				END IF;

				--FUNCION PARA INSERTAR EL REGISTRO EN LA TABLA TEMPORAL DE FINTRA
				SW:=CON.SP_INSERT_TABLE_MC_MICRO____(MCTYPE);
				SECUENCIA_INT :=SECUENCIA_INT+1;

				--raise notice 'valor_deb: % valor_credt: %',INFOITEMS_.valor_deb,INFOITEMS_.valor_credt;
			end if;
		END LOOP;

		--VALIDAMOS VALORES DEBITOS Y CREDITOS DEL COMPROBANTE A TRASLADAR.
		 IF CON.SP_VALIDACIONES(MCTYPE,'MICROCREDITO') ='N' THEN
			SW = 'N';
			CONTINUE;
		END IF;


		if(SW = 'S')then
			update negocios set procesado_mc = 'S' where cod_neg = NEGOCIO_.cod_neg;
		end if;

		SECUENCIA_INT:=1;

	END LOOP;
RETURN 'OK';

END;
$BODY$
  LANGUAGE plpgsql VOLATILE;
ALTER FUNCTION con.interfaz_microcredito_apoteosys()
  OWNER TO postgres;
