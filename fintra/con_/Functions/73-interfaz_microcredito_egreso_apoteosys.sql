-- Function: con.interfaz_microcredito_egreso_apoteosys()

-- DROP FUNCTION con.interfaz_microcredito_egreso_apoteosys();

CREATE OR REPLACE FUNCTION con.interfaz_microcredito_egreso_apoteosys()
  RETURNS text AS
$BODY$

DECLARE

 /************************************************
  *DESCRIPCION: ESTA FUNCION BUSCA TODOS LO NEGOCIOS MICROCREDITOS Y
  *CREA EL ASIENTO CONTABLE DEL EGRESO GENERADO.
  *AUTOR:=@MMEDINA
  *FECHA CREACION:=2017-06-23
  *LAST_UPDATE
  *DESCRIPCION DE CAMBIOS Y FECHA
  *PRODUCTIVO:= 2017-07-25
  ************************************************/

NEGOCIO_ RECORD;
INFOITEMS_ RECORD;
INFOCLIENTE RECORD;
LONGITUD NUMERIC;
SECUENCIA_GEN INTEGER;
SECUENCIA_INT INTEGER:= 1;
CUENTAS_ VARCHAR[] := '{23051102,I010130014208,23051104,11200501,11100101}';
FECHADOC_ VARCHAR:= '';
MCTYPE CON.TYPE_INSERT_MC;
SW TEXT:='N';
VALIDACIONES TEXT;

BEGIN
	/**SACAMOS EL LISTADO DE NEGOCIOS*/
	FOR NEGOCIO_ IN
		SELECT
			NEG.COD_NEG,
			NEG.COD_CLI,
			NEG.FECHA_NEGOCIO,
			CONV.AGENCIA,*
		FROM NEGOCIOS NEG
		INNER JOIN CONVENIOS CONV ON (CONV.ID_CONVENIO = NEG.ID_CONVENIO)
		INNER JOIN REL_UNIDADNEGOCIO_CONVENIOS RUC ON (CONV.ID_CONVENIO = RUC.ID_CONVENIO)
		INNER JOIN UNIDAD_NEGOCIO UNEG ON (UNEG.ID = RUC.ID_UNID_NEGOCIO)
		WHERE NEG.ESTADO_NEG = 'T' AND UNEG.ID = '1'
		AND PROCESADO_EGRESO = 'N'
		AND COD_NEG NOT IN (SELECT NEGOCIO_REESTRUCTURACION FROM REL_NEGOCIOS_REESTRUCTURACION )
		AND neg.cod_neg in (select cod_neg from tem.negocios_facturacion_old)
		AND COD_NEG NOT IN ('MC08853','MC08980')
		AND NEG.PERIODO = '201706'
		--AND COD_NEG in ('MC07853')--('MC07842','MC07853','MC07864')
		--LIMIT 10
	LOOP
		SELECT INTO SECUENCIA_GEN NEXTVAL('CON.INTERFAZ_SECUENCIA_EGRESO_APOTEOSYS');



		MCTYPE.MC_____CODIGO____CONTAB_B := 'FINT';
		MCTYPE.MC_____CODIGO____TD_____B := 'EGRN';
		MCTYPE.MC_____CODIGO____CD_____B := 'EGMC';
		MCTYPE.MC_____NUMERO____B := SECUENCIA_GEN; --SECUENCIA GENERAL

		/**BUSCAMOS LA COMPLETA QUE CONFORMARA EL ASIENTO CONTABLE PARA MANDARLO A APOTEOSYS*/
		FOR INFOITEMS_ IN

				(
				SELECT
					1::NUMERIC AS NUM_DOC_FEN,
					'EGR'::VARCHAR AS TIPO_DOCUMENTO,
					CXP.DOCUMENTO,
					EGR.NIT,
					(EGR.VLR+EGR.COMISION) AS VALOR_DEB,
					0::NUMERIC AS VALOR_CREDT,
					'EGRESO CANCELACION CXP: '||CXP.DOCUMENTO AS DESCRIPCION,
					EGR.CREATION_DATE,
					EGR.CREATION_DATE AS FECHA_VENCIMIENTO,
					EGR.PERIODO,
					CUENTAS_[1]AS CUENTA
				FROM FIN.CXP_DOC CXP
				INNER JOIN EGRESO EGR ON (EGR.DOCUMENT_NO = CXP.CHEQUE)
				WHERE CXP.DOCUMENTO_RELACIONADO = NEGOCIO_.COD_NEG
				AND CXP.DOCUMENTO ILIKE 'MP%'
				AND EGR.PERIODO != ''
				AND EGR.REG_STATUS = '')
				UNION ALL
				(SELECT
					1::NUMERIC AS NUM_DOC_FEN,
					'EGR' AS TIPO_DOCUMENTO,
					''::VARCHAR AS DOCUMENTO,
					EGR.NIT,
					0::NUMERIC AS VALOR_DEB,
					EGR.COMISION AS VALOR_CREDT,
					'APROVECHAMIENTOS CLIENTES: '||CXP.DOCUMENTO AS DESCRIPCION,
					EGR.CREATION_DATE,
					EGR.CREATION_DATE AS FECHA_VENCIMIENTO,
					EGR.PERIODO ,
					CUENTAS_[2]AS CUENTA
				FROM FIN.CXP_DOC CXP
				INNER JOIN EGRESO EGR ON (EGR.DOCUMENT_NO = CXP.CHEQUE)
				WHERE CXP.DOCUMENTO_RELACIONADO =  NEGOCIO_.COD_NEG
				AND CXP.DOCUMENTO ILIKE 'MP%'
				AND EGR.PERIODO !=''
				AND EGR.REG_STATUS = '')
				UNION ALL
				(
				(
				SELECT
					1::NUMERIC AS NUM_DOC_FEN,
					'EGR' AS TIPO_DOCUMENTO,
					CXP.DOCUMENTO,
					CXP.PROVEEDOR,
					0::NUMERIC AS VALOR_DEB,
					CXP.VLR_NETO AS VALOR_CREDT,
					CXP.DESCRIPCION,
					CREATION_DATE AS FECHA_CREACION,
					CREATION_DATE AS FECHA_VENCIMIENTO,
					PERIODO ,
					CUENTAS_[3]AS CUENTA
				FROM FIN.CXP_DOC CXP
				WHERE
				DOCUMENTO_RELACIONADO =  NEGOCIO_.COD_NEG
				AND DOCUMENTO ILIKE 'CXP%'
				AND CXP.PERIODO !=''
				AND CXP.REG_STATUS = ''
				)
				UNION ALL(
				SELECT
					1::NUMERIC AS NUM_DOC_FEN,
					'EGR' AS TIPO_DOCUMENTO,
					EGR.DOCUMENT_NO AS DOCUMENTO,
					EGR.NIT,
					0::NUMERIC AS VALOR_DEB,
					(EGR.VLR) AS VALOR_CREDT,
					'BANCO '||BRANCH_CODE AS DESCRIPCION,
					EGR.CREATION_DATE,
					EGR.CREATION_DATE AS FECHA_VENCIMIENTO,
					EGR.PERIODO ,
					CASE WHEN (BRANCH_CODE = 'BANCOLOMBIA') THEN CUENTAS_[4]
					     WHEN BRANCH_CODE = 'BCO OCCIDENTE' THEN CUENTAS_[5] END AS CUENTA
				FROM FIN.CXP_DOC CXP
				INNER JOIN EGRESO EGR ON (EGR.DOCUMENT_NO = CXP.CHEQUE)
				WHERE CXP.DOCUMENTO_RELACIONADO = NEGOCIO_.COD_NEG
				AND CXP.DOCUMENTO ILIKE 'MP%'
				AND (SELECT COUNT(DOCUMENTO) FROM FIN.CXP_DOC WHERE DOCUMENTO_RELACIONADO = NEGOCIO_.COD_NEG AND DOCUMENTO ILIKE 'CXP%')= 0
				AND EGR.PERIODO !=''
				AND EGR.REG_STATUS = ''
				)
				)

		LOOP

			/**BUSCAMOS LA INFORMACION DEL CLIENTE*/
			SELECT INTO INFOCLIENTE
				(CASE
				WHEN TIPO_DOC ='CED' THEN 'CC'
				WHEN TIPO_DOC ='RIF' THEN 'CE'
				WHEN TIPO_DOC ='NIT' THEN 'NIT' ELSE
				'CC' END) AS TIPO_DOC,
				(CASE
				WHEN GRAN_CONTRIBUYENTE ='N' AND AGENTE_RETENEDOR ='N' THEN 'RCOM'
				WHEN GRAN_CONTRIBUYENTE ='N' AND AGENTE_RETENEDOR ='S' THEN 'RCAU'
				WHEN GRAN_CONTRIBUYENTE ='S' AND AGENTE_RETENEDOR ='N' THEN 'GCON'
				WHEN GRAN_CONTRIBUYENTE ='S' AND AGENTE_RETENEDOR ='S' THEN 'GCAU'
				ELSE 'PNAL' END) AS CODIGO,
				(CASE
				WHEN E.CODIGO_DANE2!='' THEN E.CODIGO_DANE2
				ELSE '08001' END) AS CODIGOCIU,
				(D.NOMBRE1||' '||D.NOMBRE2) AS NOMBRE_CORTO,
				(D.APELLIDO1||' '||D.APELLIDO2) AS APELLIDOS,
				*
			FROM PROVEEDOR PROV
			LEFT JOIN NIT D ON(D.CEDULA=PROV.NIT)
			LEFT JOIN CIUDAD E ON(E.CODCIU=D.CODCIU)
			WHERE NIT = INFOITEMS_.NIT;


			IF(INFOITEMS_.TIPO_DOCUMENTO IN ('FAC','EGR') AND CON.OBTENER_HOMOLOGACION_APOTEOSYS('MICROCREDITO',INFOITEMS_.TIPO_DOCUMENTO, INFOITEMS_.CUENTA,NEGOCIO_.AGENCIA, 6)='S')THEN
				MCTYPE.MC_____FECHEMIS__B = INFOITEMS_.CREATION_DATE; --FECHA CREACION
				MCTYPE.MC_____FECHVENC__B = INFOITEMS_.FECHA_VENCIMIENTO; --FECHA VENCIMIENTO
			ELSE
				MCTYPE.MC_____FECHEMIS__B='0099-01-01 00:00:00';
				MCTYPE.MC_____FECHVENC__B='0099-01-01 00:00:00';
			END IF;
			FECHADOC_ := CASE WHEN REPLACE(SUBSTRING(INFOITEMS_.CREATION_DATE,1,7),'-','') = INFOITEMS_.PERIODO THEN INFOITEMS_.CREATION_DATE::DATE ELSE CON.SP_FECHA_CORTE_MES(SUBSTRING(INFOITEMS_.PERIODO,1,4), SUBSTRING(INFOITEMS_.PERIODO,5,2)::INT)::DATE END;
			MCTYPE.MC_____FECHA_____B := CASE WHEN (INFOITEMS_.CREATION_DATE::DATE > FECHADOC_::DATE AND REPLACE(SUBSTRING(INFOITEMS_.CREATION_DATE,1,7),'-','') = INFOITEMS_.PERIODO)  THEN INFOITEMS_.CREATION_DATE::DATE ELSE FECHADOC_::DATE END;
			MCTYPE.MC_____SECUINTE__DCD____B := SECUENCIA_INT;--SECUENCIA INTERNA
			MCTYPE.MC_____SECUINTE__B := SECUENCIA_INT;--SECUENCIA INTERNA
			MCTYPE.MC_____REFERENCI_B := NEGOCIO_.COD_NEG;
			MCTYPE.MC_____CODIGO____PF_____B := SUBSTRING( INFOITEMS_.PERIODO,1,4)::INT;
			MCTYPE.MC_____NUMERO____PERIOD_B := SUBSTRING( INFOITEMS_.PERIODO,5,2)::INT;
			MCTYPE.MC_____CODIGO____PC_____B :=  'PUCF';
			MCTYPE.MC_____CODIGO____CPC____B := CON.OBTENER_HOMOLOGACION_APOTEOSYS('MICROCREDITO', INFOITEMS_.TIPO_DOCUMENTO, INFOITEMS_.CUENTA,NEGOCIO_.AGENCIA, 1);
			MCTYPE.MC_____CODIGO____CU_____B := CON.OBTENER_HOMOLOGACION_APOTEOSYS('MICROCREDITO', INFOITEMS_.TIPO_DOCUMENTO, INFOITEMS_.CUENTA,NEGOCIO_.AGENCIA, 2);
			MCTYPE.MC_____IDENTIFIC_TERCER_B :=CASE WHEN CHAR_LENGTH(INFOITEMS_.NIT)>9 AND INFOCLIENTE.TIPO_DOC='NIT' THEN SUBSTR(INFOITEMS_.NIT,1,9) ELSE INFOITEMS_.NIT END;
			MCTYPE.MC_____DEBMONORI_B := 0;
			MCTYPE.MC_____CREMONORI_B := 0;
			MCTYPE.MC_____DEBMONLOC_B := INFOITEMS_.VALOR_DEB::NUMERIC;
			MCTYPE.MC_____CREMONLOC_B := INFOITEMS_.VALOR_CREDT::NUMERIC;
			MCTYPE.MC_____INDTIPMOV_B := 4;
			MCTYPE.MC_____INDMOVREV_B := 'N';
			MCTYPE.MC_____OBSERVACI_B := INFOITEMS_.DESCRIPCION;
			MCTYPE.MC_____FECHORCRE_B := INFOITEMS_.CREATION_DATE::TIMESTAMP;
			MCTYPE.MC_____AUTOCREA__B := 'ADMIN';
			MCTYPE.MC_____FEHOULMO__B := INFOITEMS_.CREATION_DATE::TIMESTAMP;
			MCTYPE.MC_____AUTULTMOD_B := '';
			MCTYPE.MC_____VALIMPCON_B := 0;
			MCTYPE.MC_____NUMERO_OPER_B := '';
			MCTYPE.TERCER_CODIGO____TIT____B := INFOCLIENTE.TIPO_DOC;
			MCTYPE.TERCER_NOMBCORT__B := SUBSTR(INFOCLIENTE.NOMBRE_CORTO,1,32);
			MCTYPE.TERCER_NOMBEXTE__B := SUBSTR (INFOCLIENTE.NOMBRE,1,64);
			MCTYPE.TERCER_APELLIDOS_B := SUBSTR(INFOCLIENTE.APELLIDOS,1,32);
			MCTYPE.TERCER_CODIGO____TT_____B := INFOCLIENTE.CODIGO;
			MCTYPE.TERCER_DIRECCION_B := SUBSTR(INFOCLIENTE.DIRECCION,1,64);
			MCTYPE.TERCER_CODIGO____CIUDAD_B := INFOCLIENTE.CODIGOCIU;
			MCTYPE.TERCER_TELEFONO1_B := CASE WHEN CHAR_LENGTH(INFOCLIENTE.TELEFONO)>15 THEN SUBSTR(INFOCLIENTE.TELEFONO,1,15) ELSE INFOCLIENTE.TELEFONO END;
			MCTYPE.TERCER_TIPOGIRO__B := 1;
			MCTYPE.TERCER_CODIGO____EF_____B := '';
			MCTYPE.TERCER_SUCURSAL__B := '';
			MCTYPE.TERCER_NUMECUEN__B := '';
			MCTYPE.MC_____CODIGO____DS_____B := CON.OBTENER_HOMOLOGACION_APOTEOSYS('MICROCREDITO',INFOITEMS_.TIPO_DOCUMENTO, INFOITEMS_.CUENTA,NEGOCIO_.AGENCIA, 3);
			IF(CON.OBTENER_HOMOLOGACION_APOTEOSYS('MICROCREDITO', INFOITEMS_.TIPO_DOCUMENTO, INFOITEMS_.CUENTA,NEGOCIO_.AGENCIA, 4)='S')THEN
				MCTYPE.MC_____NUMDOCSOP_B := INFOITEMS_.DOCUMENTO;--NEGOCIO
			ELSE
				MCTYPE.MC_____NUMDOCSOP_B := '';
			END IF;

			IF(CON.OBTENER_HOMOLOGACION_APOTEOSYS('MICROCREDITO', INFOITEMS_.TIPO_DOCUMENTO, INFOITEMS_.CUENTA,NEGOCIO_.AGENCIA, 5)::INT=1)THEN
				MCTYPE.MC_____NUMEVENC__B := INFOITEMS_.NUM_DOC_FEN;--NUMERO DE CUOTAS
			ELSE
				MCTYPE.MC_____NUMEVENC__B := NULL;
			END IF;

			--FUNCION PARA INSERTAR EL REGISTRO EN LA TABLA TEMPORAL DE FINTRA
			--RAISE NOTICE 'SW %',SW||' '||NEGOCIO_.COD_NEG;
			SW:=CON.SP_INSERT_TABLE_MC_MICRO____(MCTYPE);
			SECUENCIA_INT :=SECUENCIA_INT+1;

		END LOOP;

		--VALIDAMOS VALORES DEBITOS Y CREDITOS DEL COMPROBANTE A TRASLADAR.
		IF CON.SP_VALIDACIONES(MCTYPE,'MICROCREDITO') ='N' THEN
			SW = 'N';
			CONTINUE;
		END IF;

		IF(SW = 'S')THEN
			UPDATE NEGOCIOS SET PROCESADO_EGRESO = 'S' WHERE COD_NEG = NEGOCIO_.COD_NEG;
		END IF;

		SECUENCIA_INT:=1;

	END LOOP;
RETURN 'OK';

END;
$BODY$
  LANGUAGE plpgsql VOLATILE;
ALTER FUNCTION con.interfaz_microcredito_egreso_apoteosys()
  OWNER TO postgres;
