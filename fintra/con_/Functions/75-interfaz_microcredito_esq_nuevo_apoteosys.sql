-- Function: con.interfaz_microcredito_esq_nuevo_apoteosys()

-- DROP FUNCTION con.interfaz_microcredito_esq_nuevo_apoteosys();

CREATE OR REPLACE FUNCTION con.interfaz_microcredito_esq_nuevo_apoteosys()
  RETURNS text AS
$BODY$

DECLARE

 /************************************************
  *DESCRIPCION: ESTA FUNCION BUSCA TODOS LO NEGOCIOS MICROCREDITOS DEL ESQUEMA NUEVO Y
  *CREA EL ASIENTO CONTABLE DEL EGRESO GENERADO.
  *AUTOR:=@MMEDINA
  *FECHA CREACION:=2017-07-18
  *LAST_UPDATE
  *DESCRIPCION DE CAMBIOS Y FECHA
  ************************************************/

NEGOCIO_ RECORD;
INFOITEMS_ RECORD;
INFOCLIENTE RECORD;
LONGITUD NUMERIC;
SECUENCIA_GEN INTEGER;
SECUENCIA_INT INTEGER:= 1;
CUENTAS_ATL VARCHAR[] := '{13050802, 28150702, 23051102, 27059801, 27059802, 27059803, I010130014169, I010130014219, 28150704}';
CUENTAS_COR VARCHAR[] := '{13050806, 28150707, 23051106, 27059811, 27059812, 27059813, I090130014169, I090130014219, 28150709}';
CUENTAS_DEF VARCHAR[] := '{}';
FECHADOC_ VARCHAR:= '';
MCTYPE CON.TYPE_INSERT_MC;
SW TEXT:='N';
VALIDACIONES TEXT;


BEGIN
	/**SACAMOS EL LISTADO DE NEGOCIOS*/
	FOR NEGOCIO_ IN
		SELECT
			NEG.COD_NEG,
			NEG.COD_CLI,
			NEG.FECHA_NEGOCIO,
			CONV.AGENCIA,
			NEG.PERIODO,
			PROCESADO_MC
		FROM NEGOCIOS NEG
		INNER JOIN CONVENIOS CONV ON (CONV.ID_CONVENIO = NEG.ID_CONVENIO)
		INNER JOIN REL_UNIDADNEGOCIO_CONVENIOS RUC ON (CONV.ID_CONVENIO = RUC.ID_CONVENIO)
		INNER JOIN UNIDAD_NEGOCIO UNEG ON (UNEG.ID = RUC.ID_UNID_NEGOCIO)
		WHERE NEG.ESTADO_NEG = 'T' AND UNEG.ID = '1'
		AND PROCESADO_MC = 'N'
		AND COD_NEG NOT IN (SELECT NEGOCIO_REESTRUCTURACION FROM REL_NEGOCIOS_REESTRUCTURACION )
		AND COD_NEG NOT IN (SELECT COD_NEG FROM TEM.NEGOCIOS_FACTURACION_OLD)
		AND NEG.PERIODO =REPLACE(SUBSTRING(CURRENT_DATE,1,7),'-','')
		--AND COD_NEG='MC14990'
		AND COD_NEG LIKE 'MC%'
		ORDER BY CONV.AGENCIA


	LOOP
		SELECT INTO SECUENCIA_GEN NEXTVAL('CON.INTERFAZ_SECUENCIA_OPER_APOTEOSYS');
		--SELECT INTO SECUENCIA_GEN NEXTVAL('CON.INTERFAZ_SECUENCIA_OPER_APOTEOSYS');

		/**SEGUN LA AGENCIA ASIGNAMOS EL ARRAY DE CUENTAS*/
		IF(NEGOCIO_.AGENCIA = 'ATL')THEN
			CUENTAS_DEF:= CUENTAS_ATL;
		ELSIF(NEGOCIO_.AGENCIA IN ('COR', 'SUC'))THEN
			CUENTAS_DEF:= CUENTAS_COR;
		END IF;

		RAISE NOTICE 'AGENCIA %,CUENTAS_DEF: %',NEGOCIO_.AGENCIA,CUENTAS_DEF;

		/**BUSCAMOS LA INFORMACION DEL CLIENTE*/

		MCTYPE.MC_____CODIGO____CONTAB_B := 'FINT';
		MCTYPE.MC_____CODIGO____TD_____B := 'OPER';
		MCTYPE.MC_____CODIGO____CD_____B := 'MC';
		MCTYPE.MC_____NUMERO____B := SECUENCIA_GEN; --SECUENCIA GENERAL

		/**BUSCAMOS LA INFORMACION COMPLETA QUE CONFORMARA EL ASIENTO CONTABLE PARA MANDARLO A APOTEOSYS*/
		FOR INFOITEMS_ IN
			(SELECT
				'CARTERA' AS DESCR,
				NUM_DOC_FEN,
				FAC.DOCUMENTO,
				FAC.TIPO_DOCUMENTO,
				FAC.NIT,
				VALOR_FACTURA AS VALOR_DEB,
				0::NUMERIC AS VALOR_CREDT,
				FAC.DESCRIPCION,
				F_DESEM::DATE AS CREATION_DATE,
				FAC.FECHA_VENCIMIENTO,
				REPLACE(SUBSTRING(F_DESEM,1,7),'-','') AS PERIODO,
				CUENTAS_DEF[1]AS CUENTA
			FROM CON.FACTURA FAC
			INNER JOIN NEGOCIOS NEG ON (FAC.NEGASOC = NEG.COD_NEG)
			WHERE NEGASOC = NEGOCIO_.COD_NEG
			AND FAC.REG_STATUS = ''
			AND FAC.PERIODO != ''
			AND FAC.DOCUMENTO LIKE 'MC%' --ESTO SOLO APLICA PARA EL ESQUEMA NUEVO.
			GROUP BY NUM_DOC_FEN,F_DESEM,FAC.FECHA_VENCIMIENTO,NEGASOC,FAC.TIPO_DOCUMENTO,FAC.NIT,FAC.DESCRIPCION,FAC.PERIODO,VALOR_FACTURA,FAC.DOCUMENTO
			ORDER BY NUM_DOC_FEN::INTEGER
			)UNION ALL
			(SELECT
				'SEGURO' AS DESCR,
				NUM_DOC_FEN,
				FAC.DOCUMENTO,
				'FAP'::VARCHAR AS TIPO_DOCUMENTO,
				'8600284155'::VARCHAR AS NIT,
				0::NUMERIC AS VALOR_DEB,
				VALOR_UNITARIO AS VALOR_CREDT,
				FACDET.DESCRIPCION,
				F_DESEM::DATE AS CREATION_DATE,
				FAC.FECHA_VENCIMIENTO,
				REPLACE(SUBSTRING(F_DESEM,1,7),'-','') AS PERIODO,
				CUENTAS_DEF[2]AS CUENTA
			FROM CON.FACTURA FAC
			INNER JOIN NEGOCIOS NEG ON (FAC.NEGASOC = NEG.COD_NEG)
			INNER JOIN CON.FACTURA_DETALLE FACDET ON (FACDET.DOCUMENTO = FAC.DOCUMENTO AND FACDET.DESCRIPCION = 'SEGURO')
			WHERE NEGASOC = NEGOCIO_.COD_NEG
			AND FAC.REG_STATUS = ''
			AND FAC.PERIODO != ''
			ORDER BY NUM_DOC_FEN::INTEGER
			)UNION ALL
			(SELECT
				'CXP CLIENTE' AS DESCR,
				'1' AS NUM_DOC_FEN,
				CXP.DOCUMENTO,--'' AS DOCUMENTO,
				CXP.TIPO_DOCUMENTO,
				CXP.PROVEEDOR AS NIT,
				0::NUMERIC AS VALOR_DEB,
				VLR_NETO AS VALOR_CREDT,
				CXP.DESCRIPCION,
				(SELECT F_DESEM::DATE FROM NEGOCIOS  WHERE COD_NEG = NEGOCIO_.COD_NEG GROUP BY COD_NEG,F_DESEM)::DATE AS CREATION_DATE,
				(SELECT F_DESEM::DATE FROM NEGOCIOS  WHERE COD_NEG = NEGOCIO_.COD_NEG GROUP BY COD_NEG,F_DESEM)::DATE AS FECHA_VENCIMIENTO,
				(SELECT REPLACE(SUBSTRING(F_DESEM,1,7),'-','') FROM NEGOCIOS  WHERE COD_NEG = NEGOCIO_.COD_NEG GROUP BY COD_NEG,F_DESEM) AS  PERIODO,
				CUENTAS_DEF[3]AS CUENTA
			FROM FIN.CXP_DOC CXP
			INNER JOIN NEGOCIOS NEG ON (CXP.DOCUMENTO_RELACIONADO = NEG.COD_NEG)
			WHERE NEG.COD_NEG = NEGOCIO_.COD_NEG
			AND DOCUMENTO ILIKE 'MP%'
			AND CXP.REG_STATUS = ''
			AND CXP.PERIODO != ''
			)UNION ALL
			(SELECT
				'INTERESES' AS DESCR,
				NUM_DOC_FEN,
				B.DOCUMENTO,
				'NEG' AS TIPO_DOCUMENTO,
				FAC.NIT,
				0::NUMERIC AS VALOR_DEB,
				VALOR_UNITARIO AS VALOR_CREDT,
				FACDET.DESCRIPCION,
				F_DESEM::DATE AS CREATION_DATE,
				FAC.FECHA_VENCIMIENTO,
				REPLACE(SUBSTRING(F_DESEM,1,7),'-','') AS PERIODO,
				CUENTAS_DEF[4]AS CUENTA
			FROM CON.FACTURA FAC
			INNER JOIN NEGOCIOS NEG ON (FAC.NEGASOC = NEG.COD_NEG)
			INNER JOIN CON.FACTURA_DETALLE FACDET ON (FACDET.DOCUMENTO = FAC.DOCUMENTO AND FACDET.DESCRIPCION = 'INTERES')
			INNER  JOIN (SELECT CODNEG,
						       SUBSTRING(COD,1,2) AS PREFIJO,
						       COD AS DOCUMENTO,
						       LPAD((SUBSTRING(COD,10,2)::INTEGER+1),2,'00') AS CUOTA,
						       FECHA_DOC::DATE AS FECHA_VEN,
						       VALOR
						FROM ING_FENALCO WHERE TIPODOC='MI'
						ORDER BY
						COD,LPAD((SUBSTRING(COD,10,2)::INTEGER+1),2,'00')::INTEGER
					) B ON (FAC.NEGASOC=B.CODNEG AND LPAD(SUBSTRING(FAC.DOCUMENTO,8,2),2,'00') =B.CUOTA)
			WHERE NEGASOC = NEGOCIO_.COD_NEG
			AND FAC.REG_STATUS = ''
			AND FAC.PERIODO != ''
			ORDER BY NUM_DOC_FEN::INTEGER
			)UNION ALL
			(SELECT
				'CAT' AS DESCR,
				NUM_DOC_FEN,
				B.DOCUMENTO,
				'NEG' AS TIPO_DOCUMENTO,
				FAC.NIT,
				0::NUMERIC AS VALOR_DEB,
				VALOR_UNITARIO AS VALOR_CREDT,
				FACDET.DESCRIPCION,
				F_DESEM::DATE AS CREATION_DATE,
				FAC.FECHA_VENCIMIENTO,
				REPLACE(SUBSTRING(F_DESEM,1,7),'-','') AS PERIODO,
				CUENTAS_DEF[5]AS CUENTA
			FROM CON.FACTURA FAC
			INNER JOIN NEGOCIOS NEG ON (FAC.NEGASOC = NEG.COD_NEG)
			INNER JOIN CON.FACTURA_DETALLE FACDET ON (FACDET.DOCUMENTO = FAC.DOCUMENTO AND FACDET.DESCRIPCION = 'CAT')
			INNER  JOIN (SELECT CODNEG,
						       SUBSTRING(COD,1,2) AS PREFIJO,
						       COD AS DOCUMENTO,
						       LPAD((SUBSTRING(COD,10,2)::INTEGER+1),2,'00') AS CUOTA,
						       FECHA_DOC::DATE AS FECHA_VEN,
						       VALOR
						FROM ING_FENALCO WHERE TIPODOC='CA'
						ORDER BY
						COD,LPAD((SUBSTRING(COD,10,2)::INTEGER+1),2,'00')::INTEGER
					) B ON (FAC.NEGASOC=B.CODNEG AND LPAD(SUBSTRING(FAC.DOCUMENTO,8,2),2,'00') =B.CUOTA)
			WHERE NEGASOC = NEGOCIO_.COD_NEG
			AND FAC.REG_STATUS = ''
			AND FAC.PERIODO != ''
			ORDER BY NUM_DOC_FEN::INTEGER
			)UNION ALL
			(SELECT
				'CUOTA ADMINISTRACION' AS DESCR,
				NUM_DOC_FEN,
				B.DOCUMENTO,
				'NEG' AS TIPO_DOCUMENTO,
				FAC.NIT,
				0::NUMERIC AS VALOR_DEB,
				VALOR_UNITARIO AS VALOR_CREDT,
				FACDET.DESCRIPCION,
				F_DESEM::DATE AS CREATION_DATE,
				FAC.FECHA_VENCIMIENTO,
				REPLACE(SUBSTRING(F_DESEM,1,7),'-','') AS PERIODO,
				CUENTAS_DEF[6]AS CUENTA
			FROM CON.FACTURA FAC
			INNER JOIN NEGOCIOS NEG ON (FAC.NEGASOC = NEG.COD_NEG)
			INNER JOIN CON.FACTURA_DETALLE FACDET ON (FACDET.DOCUMENTO = FAC.DOCUMENTO AND FACDET.DESCRIPCION = 'CUOTA-ADMINISTRCION')
			INNER  JOIN (SELECT CODNEG,
						       SUBSTRING(COD,1,2) AS PREFIJO,
						       COD AS DOCUMENTO,
						       LPAD((SUBSTRING(COD,10,2)::INTEGER+1),2,'00') AS CUOTA,
						       FECHA_DOC::DATE AS FECHA_VEN,
						       VALOR
						FROM ING_FENALCO WHERE TIPODOC='CM'
						ORDER BY
						COD,LPAD((SUBSTRING(COD,10,2)::INTEGER+1),2,'00')::INTEGER
					) B ON (FAC.NEGASOC=B.CODNEG AND LPAD(SUBSTRING(FAC.DOCUMENTO,8,2),2,'00') =B.CUOTA)
			WHERE NEGASOC = NEGOCIO_.COD_NEG
			AND FAC.REG_STATUS = ''
			AND FAC.PERIODO != ''
			ORDER BY NUM_DOC_FEN::INTEGER
			)UNION ALL
			(SELECT
				'RETANQUEO' AS DESCR,
				1::VARCHAR AS DOC,
				''AS DOCUMENTO,
				'NEG'AS TIPO_DOCUMENTO,
				NEG.COD_CLI,
				0::NUMERIC AS VALOR_DEB,
				(CDET.VALOR_CREDITO) AS VALOR_CREDT,
				'NEGOCIO RETANQUEO' AS DESCRIPCION,
				F_DESEM::DATE AS CREATION_DATE,
				F_DESEM::DATE AS VENCIMIENTO,
				REPLACE(SUBSTRING(F_DESEM,1,7),'-','') AS PERIODO,
				CUENTAS_DEF[7]AS CUENTA
			FROM NEGOCIOS NEG
			INNER JOIN CON.COMPRODET CDET ON (NEG.COD_NEG = CDET.NUMDOC AND CUENTA = 'I010130014169')
			WHERE COD_NEG IN (NEGOCIO_.COD_NEG)
			AND CDET.VALOR_CREDITO > 0
			GROUP BY NEG.COD_CLI,CDET.VALOR_CREDITO,F_DESEM,NEG.PERIODO
			)UNION ALL
			(SELECT
				'CXP CENTRAL RIESGO' AS DESCR,
				1::VARCHAR AS DOC,
				'' AS DOCUMENTO,
				CXP.TIPO_DOCUMENTO,
				CXP.PROVEEDOR,
				0::NUMERIC AS VALOR_DEB,
				(VLR*-1) AS VALOR_CREDT,
				CXPDET.DESCRIPCION,
				(SELECT F_DESEM::DATE FROM NEGOCIOS  WHERE COD_NEG = NEGOCIO_.COD_NEG GROUP BY COD_NEG,F_DESEM)::DATE AS CREATION_DATE,
				(SELECT F_DESEM::DATE FROM NEGOCIOS  WHERE COD_NEG = NEGOCIO_.COD_NEG GROUP BY COD_NEG,F_DESEM)::DATE AS VENCIMIENTO,
				(SELECT REPLACE(SUBSTRING(F_DESEM,1,7),'-','') FROM NEGOCIOS  WHERE COD_NEG = NEGOCIO_.COD_NEG GROUP BY COD_NEG,F_DESEM) AS  PERIODO,
				CUENTAS_DEF[8]AS CUENTA
			FROM FIN.CXP_ITEMS_DOC  CXPDET
			INNER JOIN FIN.CXP_DOC  CXP ON (CXPDET.DOCUMENTO = CXP.DOCUMENTO)
			INNER JOIN NEGOCIOS NEG ON (NEG.COD_NEG = CXP.DOCUMENTO_RELACIONADO)
			WHERE CXP.DOCUMENTO_RELACIONADO IN (NEGOCIO_.COD_NEG)
			AND CXP.DOCUMENTO ILIKE 'MP%'
			AND CXPDET.REG_STATUS = ''
			AND CXP.REG_STATUS = ''
			AND (VLR*-1) > 0
			AND CXPDET.DESCRIPCION ILIKE 'DESCUENTO ESTUDIO DE CREDITO%'
			)UNION ALL
			(SELECT
				'FIANZA' AS DESCR,
				'1' AS NUM_DOC_FEN,
				CXP.DOCUMENTO,--'' AS DOCUMENTO,
				CXP.TIPO_DOCUMENTO,
				--CXP.PROVEEDOR AS NIT,
				'9002207536' AS NIT,
				0::NUMERIC AS VALOR_DEB,
				VLR_NETO AS VALOR_CREDT,
				CXP.DESCRIPCION,
				(SELECT F_DESEM::DATE FROM NEGOCIOS  WHERE COD_NEG = NEGOCIO_.COD_NEG GROUP BY COD_NEG,F_DESEM)::DATE AS CREATION_DATE,
				(SELECT F_DESEM::DATE FROM NEGOCIOS  WHERE COD_NEG = NEGOCIO_.COD_NEG GROUP BY COD_NEG,F_DESEM)::DATE AS FECHA_VENCIMIENTO,
				(SELECT REPLACE(SUBSTRING(F_DESEM,1,7),'-','') FROM NEGOCIOS  WHERE COD_NEG = NEGOCIO_.COD_NEG GROUP BY COD_NEG,F_DESEM) AS  PERIODO,
				CUENTAS_DEF[9]AS CUENTA
			FROM FIN.CXP_DOC CXP
			INNER JOIN NEGOCIOS NEG ON (CXP.DOCUMENTO_RELACIONADO = NEG.COD_NEG)
			WHERE NEG.COD_NEG = NEGOCIO_.COD_NEG
			AND DOCUMENTO ILIKE 'FZ%'
			AND CXP.REG_STATUS = ''
			AND CXP.PERIODO != ''
			GROUP BY CXP.CREATION_DATE,CXP.DOCUMENTO,CXP.TIPO_DOCUMENTO,CXP.PROVEEDOR,CXP.DESCRIPCION,CXP.PERIODO,VLR_NETO
			)
		LOOP
			IF (INFOITEMS_.VALOR_DEB !=0 AND  INFOITEMS_.VALOR_CREDT =0) OR (INFOITEMS_.VALOR_DEB =0 AND INFOITEMS_.VALOR_CREDT !=0) THEN

				SELECT INTO INFOCLIENTE
				(CASE
				WHEN TIPO_DOC ='CED' THEN 'CC'
				WHEN TIPO_DOC ='RIF' THEN 'CE'
				WHEN TIPO_DOC ='NIT' THEN 'NIT' ELSE
				'CC' END) AS TIPO_DOC,
				(CASE
				WHEN GRAN_CONTRIBUYENTE ='N' AND AGENTE_RETENEDOR ='N' THEN 'RCOM'
				WHEN GRAN_CONTRIBUYENTE ='N' AND AGENTE_RETENEDOR ='S' THEN 'RCAU'
				WHEN GRAN_CONTRIBUYENTE ='S' AND AGENTE_RETENEDOR ='N' THEN 'GCON'
				WHEN GRAN_CONTRIBUYENTE ='S' AND AGENTE_RETENEDOR ='S' THEN 'GCAU'
				ELSE 'PNAL' END) AS CODIGO,
				(CASE
				WHEN E.CODIGO_DANE2!='' THEN E.CODIGO_DANE2
				ELSE '08001' END) AS CODIGOCIU,
				(D.NOMBRE1||' '||D.NOMBRE2) AS NOMBRE_CORTO,
				(D.APELLIDO1||' '||D.APELLIDO2) AS APELLIDOS,
				*
				FROM PROVEEDOR PROV
				LEFT JOIN NIT D ON(D.CEDULA=PROV.NIT)
				LEFT JOIN CIUDAD E ON(E.CODCIU=D.CODCIU)
				WHERE NIT = INFOITEMS_.NIT;


				IF(INFOITEMS_.TIPO_DOCUMENTO IN ('FAC','FAP','NEG') AND CON.OBTENER_HOMOLOGACION_APOTEOSYS('MICROCREDITO_N',INFOITEMS_.TIPO_DOCUMENTO, INFOITEMS_.CUENTA,NEGOCIO_.AGENCIA, 6)='S')THEN
					MCTYPE.MC_____FECHVENC__B = INFOITEMS_.FECHA_VENCIMIENTO; --FECHA VENCIMIENTO
						IF (INFOITEMS_.FECHA_VENCIMIENTO < INFOITEMS_.CREATION_DATE)THEN /** SE VALIDA SI LA FECHA DE VENCIMEINTO ES MENOR A LA DE CREACION*/
							MCTYPE.MC_____FECHEMIS__B = INFOITEMS_.FECHA_VENCIMIENTO; --FECHA CREACION
						ELSE
							RAISE NOTICE 'SIMPRE DEBE ENTRA EN ESTA CONDICION PARA FECHA DE EMISION';
							MCTYPE.MC_____FECHEMIS__B = INFOITEMS_.CREATION_DATE; --FECHA CREACION
						END IF;
				ELSE
					MCTYPE.MC_____FECHEMIS__B='0099-01-01 00:00:00';
					MCTYPE.MC_____FECHVENC__B='0099-01-01 00:00:00';
				END IF;

				--FECHADOC_ := CASE WHEN REPLACE(SUBSTRING(INFOITEMS_.CREATION_DATE,1,7),'-','') = INFOITEMS_.PERIODO THEN INFOITEMS_.CREATION_DATE::DATE ELSE CON.SP_FECHA_CORTE_MES(SUBSTRING(INFOITEMS_.PERIODO,1,4), SUBSTRING(INFOITEMS_.PERIODO,5,2)::INT)::DATE END;
				MCTYPE.MC_____FECHA_____B := INFOITEMS_.CREATION_DATE;--CASE WHEN (INFOITEMS_.CREATION_DATE::DATE > FECHADOC_::DATE AND REPLACE(SUBSTRING(INFOITEMS_.CREATION_DATE,1,7),'-','') = INFOITEMS_.PERIODO)  THEN INFOITEMS_.CREATION_DATE::DATE ELSE FECHADOC_::DATE END;
				MCTYPE.MC_____SECUINTE__DCD____B := SECUENCIA_INT;--SECUENCIA INTERNA
				MCTYPE.MC_____SECUINTE__B := SECUENCIA_INT;--SECUENCIA INTERNA
				MCTYPE.MC_____REFERENCI_B := NEGOCIO_.COD_NEG;
				MCTYPE.MC_____CODIGO____PF_____B := SUBSTRING( INFOITEMS_.PERIODO,1,4)::INT;
				MCTYPE.MC_____NUMERO____PERIOD_B := SUBSTRING( INFOITEMS_.PERIODO,5,2)::INT;
				MCTYPE.MC_____CODIGO____PC_____B :=  'PUCF';
				MCTYPE.MC_____CODIGO____CPC____B := CON.OBTENER_HOMOLOGACION_APOTEOSYS('MICROCREDITO_N', INFOITEMS_.TIPO_DOCUMENTO, INFOITEMS_.CUENTA,NEGOCIO_.AGENCIA, 1);
				MCTYPE.MC_____CODIGO____CU_____B := CON.OBTENER_HOMOLOGACION_APOTEOSYS('MICROCREDITO_N', INFOITEMS_.TIPO_DOCUMENTO, INFOITEMS_.CUENTA,NEGOCIO_.AGENCIA, 2);
				MCTYPE.MC_____IDENTIFIC_TERCER_B := CASE WHEN CHAR_LENGTH(INFOITEMS_.NIT)>9 AND INFOCLIENTE.TIPO_DOC='NIT' THEN SUBSTR(INFOITEMS_.NIT,1,9) ELSE INFOITEMS_.NIT END;
				MCTYPE.MC_____DEBMONORI_B := 0;
				MCTYPE.MC_____CREMONORI_B := 0;
				MCTYPE.MC_____DEBMONLOC_B := INFOITEMS_.VALOR_DEB::NUMERIC;
				MCTYPE.MC_____CREMONLOC_B := INFOITEMS_.VALOR_CREDT::NUMERIC;
				MCTYPE.MC_____INDTIPMOV_B := 4;
				MCTYPE.MC_____INDMOVREV_B := 'N';
				MCTYPE.MC_____OBSERVACI_B := INFOITEMS_.DESCRIPCION;
				MCTYPE.MC_____FECHORCRE_B := INFOITEMS_.CREATION_DATE::TIMESTAMP;
				MCTYPE.MC_____AUTOCREA__B := 'ADMIN';
				MCTYPE.MC_____FEHOULMO__B := INFOITEMS_.CREATION_DATE::TIMESTAMP;
				MCTYPE.MC_____AUTULTMOD_B := '';
				MCTYPE.MC_____VALIMPCON_B := 0;
				MCTYPE.MC_____NUMERO_OPER_B := '';
				MCTYPE.TERCER_CODIGO____TIT____B := INFOCLIENTE.TIPO_DOC;
				MCTYPE.TERCER_NOMBCORT__B := INFOCLIENTE.NOMBRE_CORTO;
				MCTYPE.TERCER_NOMBEXTE__B := INFOCLIENTE.NOMBRE;
				MCTYPE.TERCER_APELLIDOS_B := INFOCLIENTE.APELLIDOS;
				MCTYPE.TERCER_CODIGO____TT_____B := INFOCLIENTE.CODIGO;
				MCTYPE.TERCER_DIRECCION_B := INFOCLIENTE.DIRECCION;
				MCTYPE.TERCER_CODIGO____CIUDAD_B := INFOCLIENTE.CODIGOCIU;
				MCTYPE.TERCER_TELEFONO1_B := CASE WHEN CHAR_LENGTH(INFOCLIENTE.TELEFONO)>15 THEN SUBSTR(INFOCLIENTE.TELEFONO,1,15) ELSE INFOCLIENTE.TELEFONO END;
				MCTYPE.TERCER_TIPOGIRO__B := 1;
				MCTYPE.TERCER_CODIGO____EF_____B := '';
				MCTYPE.TERCER_SUCURSAL__B := '';
				MCTYPE.TERCER_NUMECUEN__B := '';
				MCTYPE.MC_____CODIGO____DS_____B := CON.OBTENER_HOMOLOGACION_APOTEOSYS('MICROCREDITO_N',INFOITEMS_.TIPO_DOCUMENTO, INFOITEMS_.CUENTA,NEGOCIO_.AGENCIA, 3);

				IF(CON.OBTENER_HOMOLOGACION_APOTEOSYS('MICROCREDITO_N', INFOITEMS_.TIPO_DOCUMENTO, INFOITEMS_.CUENTA,NEGOCIO_.AGENCIA, 4)='S')THEN --->OJO

					MCTYPE.MC_____NUMDOCSOP_B := INFOITEMS_.DOCUMENTO; -->FACTURA
				ELSE
					MCTYPE.MC_____NUMDOCSOP_B := '';
				END IF;

				IF(CON.OBTENER_HOMOLOGACION_APOTEOSYS('MICROCREDITO_N', INFOITEMS_.TIPO_DOCUMENTO, INFOITEMS_.CUENTA,NEGOCIO_.AGENCIA, 5)::INT=1)THEN
					MCTYPE.MC_____NUMEVENC__B := 1;
				ELSE
					MCTYPE.MC_____NUMEVENC__B := NULL;
				END IF;

				--FUNCION PARA INSERTAR EL REGISTRO EN LA TABLA TEMPORAL DE FINTRA
				RAISE NOTICE 'SW %',SW||' '||NEGOCIO_.COD_NEG;

					SW:=CON.SP_INSERT_TABLE_MC_MICRO____(MCTYPE);
					SECUENCIA_INT :=SECUENCIA_INT+1;

			END IF;

		END LOOP;

		--VALIDAMOS VALORES DEBITOS Y CREDITOS DEL COMPROBANTE A TRASLADAR.
		IF CON.SP_VALIDACIONES(MCTYPE,'MICROCREDITO') ='N' THEN
			SW = 'N';
			CONTINUE;
		END IF;

		IF(SW = 'S')THEN
			UPDATE NEGOCIOS SET PROCESADO_MC = 'S' WHERE COD_NEG = NEGOCIO_.COD_NEG;
		END IF;

		SECUENCIA_INT:=1;

	END LOOP;
RETURN 'OK';

END;
$BODY$
  LANGUAGE plpgsql VOLATILE;
ALTER FUNCTION con.interfaz_microcredito_esq_nuevo_apoteosys()
  OWNER TO postgres;
